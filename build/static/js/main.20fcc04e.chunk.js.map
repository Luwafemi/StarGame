{"version":3,"sources":["utils.js","StarNumbers.js","PlayNumber.js","PlayAgain.js","useGameState.js","App.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarNumbers","props","stars","map","a","key","className","colors","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","useGameState","useState","setStars","availableNums","setAvailableNums","candidateNums","setcandidateNums","secondsLeft","setSecondsLeft","useEffect","setTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","Game","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","resetGame","StarMatch","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20fcc04e.chunk.js","sourcesContent":["// Math science\r\n\r\nconst utils = {\r\n  // Sum an array\r\n  sum: (arr) => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) =>\r\n    Array.from(\r\n      {\r\n        length: max - min + 1,\r\n      },\r\n      (_, i) => min + i\r\n    ),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n    const sets = [[]];\r\n    const sums = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = 0, len = sets.length; j < len; j++) {\r\n        const candidateSet = sets[j].concat(arr[i]);\r\n        const candidateSum = utils.sum(candidateSet);\r\n        if (candidateSum <= max) {\r\n          sets.push(candidateSet);\r\n          sums.push(candidateSum);\r\n        }\r\n      }\r\n    }\r\n    return sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\nexport default utils;\r\n","import React from 'react';\r\nimport utils from './utils.js';\r\n\r\nconst StarNumbers = (props) => (\r\n  <>\r\n    {' '}\r\n    {utils.range(1, props.stars).map((a) => (\r\n      <div key={a} className=\"star\" />\r\n    ))}{' '}\r\n  </>\r\n);\r\nexport default StarNumbers;\r\n","import React from 'react';\r\n\r\nfunction PlayNumber(props) {\r\n  return (\r\n    <button\r\n      className=\"number\"\r\n      style={{\r\n        backgroundColor: colors[props.status],\r\n      }}\r\n      onClick={() => {\r\n        props.onClick(props.number, props.status);\r\n      }}\r\n    >\r\n      {props.number}{' '}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Color Theme\r\nconst colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n\r\nexport default PlayNumber;\r\n","import React from 'react';\r\nfunction PlayAgain(props) {\r\n  return (\r\n    <div className=\"game-done\">\r\n      <div\r\n        className=\"message\"\r\n        style={{\r\n          color: props.gameStatus == 'won' ? 'Green' : 'Red',\r\n        }}\r\n      >\r\n        {props.gameStatus == 'won' ? 'Nice' : 'Game Over'}{' '}\r\n      </div>{' '}\r\n      <button onClick={props.onClick}> Play Again </button>{' '}\r\n    </div>\r\n  );\r\n}\r\nexport default PlayAgain;\r\n","import { useState, useEffect } from 'react';\r\nimport utils from './utils.js';\r\n//Custom Hook\r\nconst useGameState = () => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setcandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums != 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }, 1000);\r\n      // return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setcandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setAvailableNums(newAvailableNums);\r\n      setcandidateNums([]);\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n    }\r\n  };\r\n\r\n  return {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState,\r\n  };\r\n};\r\nexport default useGameState;\r\n","import React, { useState } from 'react';\nimport StarNumbers from './StarNumbers.js';\nimport utils from './utils.js';\nimport PlayNumber from './PlayNumber.js';\nimport PlayAgain from './PlayAgain.js';\nimport useGameState from './useGameState';\n\nconst Game = (props) => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus =\n    availableNums == 0 ? 'won' : secondsLeft == 0 ? 'lost' : 'active';\n\n  const numberStatus = (number) => {\n    // console.log('testing...')\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus == 'used' || secondsLeft == 0) {\n      return;\n    }\n\n    const newCandidateNums =\n      currentStatus == 'available'\n        ? candidateNums.concat(number)\n        : candidateNums.filter((cn) => cn !== number);\n\n    setGameState(newCandidateNums);\n  };\n\n  return (\n    <div className=\"game\" key={props.key}>\n      <div className=\"help\">\n        Pick one or more numbers that sum to the number of stars.{' '}\n      </div>{' '}\n      <div className=\"body\">\n        <div className=\"left\">\n          {' '}\n          {gameStatus != 'active' ? (\n            <PlayAgain onClick={props.resetGame} gameStatus={gameStatus} />\n          ) : (\n            <StarNumbers stars={stars} />\n          )}{' '}\n        </div>{' '}\n        <div className=\"right\">\n          {' '}\n          {utils.range(1, 9).map((number) => (\n            <PlayNumber\n              number={number}\n              status={numberStatus(number)}\n              key={number}\n              onClick={onNumberClick}\n            />\n          ))}{' '}\n        </div>{' '}\n      </div>{' '}\n      <div className=\"timer\"> Time Remaining: {secondsLeft} </div>{' '}\n    </div>\n  );\n};\n\nfunction StarMatch() {\n  const [gameId, setGameId] = useState(1);\n  const resetGame = () => {\n    setGameId(gameId + 1);\n  };\n  return <Game resetGame={resetGame} key={gameId} />;\n}\n\nexport default StarMatch;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}